package com.gplayer;

import java.util.Observable;
import java.util.Observer;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.widget.Toast;

import com.gplayer.backend.GCMIntentService;
import com.gplayer.utils.NetworkManager;

public abstract class BaseActivity extends FragmentActivity implements Observer
{

    protected enum State
    {
        REGISTERED, REGISTERING, UNREGISTERED, UNREGISTERING
    }
    
    public static final String PREF_KEY =  "main_prefs";
    public static final String PREF_KEY_PHONE_NUMBER = "key_phone_number";
    public static final String PREF_KEY_GCM_REGISTRATION_ID = "key_gcm_registration_id";
    
    protected State mCurState = State.UNREGISTERED;

    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        // @TODO set phone number into prefs if it can't be retrieved.
        super.onCreate(savedInstanceState);
        
        // Initialise network manager.
        if (NetworkManager.initInstance(getApplicationContext())) {
            
            NetworkManager networkManager = NetworkManager.getInstance();
            networkManager.addObserver(this);
            
            if (networkManager.isConnected()){
                registerGCM();
            }
        } 
    }

    @Override
    protected void onDestroy()
    {
        super.onDestroy();
        NetworkManager.getInstance().deleteObserver(this);
    }
    
    @Override
    protected void onNewIntent(Intent intent)
    {
        super.onNewIntent(intent);

        /*
         * If we are dealing with an intent generated by the GCMIntentService
         * class, then display the provided message.
         */
        if (intent.getBooleanExtra("gcmIntentServiceMessage", false)) {

            showDialog(intent.getStringExtra("message"));

            if (intent.getBooleanExtra("registrationMessage", false)) {

                if (intent.getBooleanExtra("error", false)) {
                    /*
                     * If we get a registration/unregistration-related error,
                     * and we're in the process of registering, then we move
                     * back to the unregistered state. If we're in the process
                     * of unregistering, then we move back to the registered
                     * state.
                     */
                    if (mCurState == State.REGISTERING) {
                        updateState(State.UNREGISTERED);
                    } else {
                        updateState(State.REGISTERED);
                    }
                } else {
                    /*
                     * If we get a registration/unregistration-related success,
                     * and we're in the process of registering, then we move to
                     * the registered state. If we're in the process of
                     * unregistering, the we move back to the unregistered
                     * state.
                     */
                    if (mCurState == State.REGISTERING) {
                        updateState(State.REGISTERED);
                    } else {
                        updateState(State.UNREGISTERED);
                    }
                }
            }
        }
    }
    
  
    private void registerGCM()
    {
        if (GCMIntentService.PROJECT_NUMBER == null
                || GCMIntentService.PROJECT_NUMBER.length() == 0) {
            showDialog("Unable to register for Google Cloud Messaging. "
                    + "Your application's PROJECT_NUMBER field is unset! You can change "
                    + "it in GCMIntentService.java");
        } else if (!GCMIntentService.isRegistered(getApplicationContext())){
            updateState(State.REGISTERING);
            try {
                GCMIntentService
                        .register(getApplicationContext());
            } catch (Exception e) {
                Log.e("BaseActivity",
                        "Exception received when attempting to register for Google Cloud "
                                + "Messaging. Perhaps you need to set your virtual device's "
                                + " target to Google APIs? "
                                + "See https://developers.google.com/eclipse/docs/cloud_endpoints_android"
                                + " for more information.", e);
                showDialog("There was a problem when attempting to register for "
                        + "Google Cloud Messaging. If you're running in the emulator, "
                        + "is the target of your virtual device set to 'Google APIs?' "
                        + "See the Android log for more details.");
                updateState(State.UNREGISTERED);
            }
        }
    }
    
    private void updateState(State newState)
    {
        mCurState = newState;
        Toast.makeText(this, newState.toString(), Toast.LENGTH_LONG).show();
    }
    
    protected void showDialog(String message)
    {
        new AlertDialog.Builder(this)
                .setMessage(message)
                .setPositiveButton(android.R.string.ok,
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int id)
                            {
                                dialog.dismiss();
                            }
                        }).show();
    }
    
    @Override
    public void update(Observable observable, Object data)
    {
        // TODO Auto-generated method stub
        Boolean isConnected = (Boolean) data;
        Log.i("Main", isConnected.toString());
        
        if (isConnected)
        {
            registerGCM();
        }
    }
}